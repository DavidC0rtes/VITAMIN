
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AGENT BINDING BOUND COLON COMMA EVENTUALLY EXIST FORALL LPAREN NEG PROP RPARENformula : quantifiers COLON binding_pairs temporal_expressionquantifiers : quantifier\n| quantifiers quantifierquantifier : EXIST opt_bound BINDING\n| FORALL opt_bound BINDINGopt_bound : BOUND\n| emptyempty :binding_pairs : binding_pair\n| binding_pairs binding_pairbinding_pair : LPAREN BINDING COMMA AGENT RPARENtemporal_expression : negation_expression\n| EVENTUALLY PROPnegation_expression : NEG EVENTUALLY PROP'
    
_lr_action_items = {'EXIST':([0,2,3,7,15,16,],[4,4,-2,-3,-4,-5,]),'FORALL':([0,2,3,7,15,16,],[5,5,-2,-3,-4,-5,]),'$end':([1,17,19,23,26,],[0,-1,-12,-13,-14,]),'COLON':([2,3,7,15,16,],[6,-2,-3,-4,-5,]),'BOUND':([4,5,],[9,9,]),'BINDING':([4,5,8,9,10,11,14,],[-8,-8,15,-6,-7,16,22,]),'LPAREN':([6,12,13,18,28,],[14,14,-9,-10,-11,]),'EVENTUALLY':([12,13,18,21,28,],[20,-9,-10,24,-11,]),'NEG':([12,13,18,28,],[21,-9,-10,-11,]),'PROP':([20,24,],[23,26,]),'COMMA':([22,],[25,]),'AGENT':([25,],[27,]),'RPAREN':([27,],[28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'formula':([0,],[1,]),'quantifiers':([0,],[2,]),'quantifier':([0,2,],[3,7,]),'opt_bound':([4,5,],[8,11,]),'empty':([4,5,],[10,10,]),'binding_pairs':([6,],[12,]),'binding_pair':([6,12,],[13,18,]),'temporal_expression':([12,],[17,]),'negation_expression':([12,],[19,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> formula","S'",1,None,None,None),
  ('formula -> quantifiers COLON binding_pairs temporal_expression','formula',4,'p_formula','parser.py',41),
  ('quantifiers -> quantifier','quantifiers',1,'p_quantifiers','parser.py',45),
  ('quantifiers -> quantifiers quantifier','quantifiers',2,'p_quantifiers','parser.py',46),
  ('quantifier -> EXIST opt_bound BINDING','quantifier',3,'p_quantifier','parser.py',54),
  ('quantifier -> FORALL opt_bound BINDING','quantifier',3,'p_quantifier','parser.py',55),
  ('opt_bound -> BOUND','opt_bound',1,'p_opt_bound','parser.py',63),
  ('opt_bound -> empty','opt_bound',1,'p_opt_bound','parser.py',64),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',72),
  ('binding_pairs -> binding_pair','binding_pairs',1,'p_binding_pairs','parser.py',76),
  ('binding_pairs -> binding_pairs binding_pair','binding_pairs',2,'p_binding_pairs','parser.py',77),
  ('binding_pair -> LPAREN BINDING COMMA AGENT RPAREN','binding_pair',5,'p_binding_pair','parser.py',84),
  ('temporal_expression -> negation_expression','temporal_expression',1,'p_temporal_expression','parser.py',88),
  ('temporal_expression -> EVENTUALLY PROP','temporal_expression',2,'p_temporal_expression','parser.py',89),
  ('negation_expression -> NEG EVENTUALLY PROP','negation_expression',3,'p_negation_expression','parser.py',96),
]
