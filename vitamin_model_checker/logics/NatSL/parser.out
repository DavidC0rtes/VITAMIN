Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> formula
Rule 1     formula -> quantifiers COLON binding_pairs temporal_expression
Rule 2     quantifiers -> quantifier
Rule 3     quantifiers -> quantifiers quantifier
Rule 4     quantifier -> EXIST opt_bound BINDING
Rule 5     quantifier -> FORALL opt_bound BINDING
Rule 6     opt_bound -> BOUND
Rule 7     opt_bound -> empty
Rule 8     empty -> <empty>
Rule 9     binding_pairs -> binding_pair
Rule 10    binding_pairs -> binding_pairs binding_pair
Rule 11    binding_pair -> LPAREN BINDING COMMA AGENT RPAREN
Rule 12    temporal_expression -> negation_expression
Rule 13    temporal_expression -> EVENTUALLY PROP
Rule 14    negation_expression -> NEG EVENTUALLY PROP

Terminals, with rules where they appear

AGENT                : 11
BINDING              : 4 5 11
BOUND                : 6
COLON                : 1
COMMA                : 11
EVENTUALLY           : 13 14
EXIST                : 4
FORALL               : 5
LPAREN               : 11
NEG                  : 14
PROP                 : 13 14
RPAREN               : 11
error                : 

Nonterminals, with rules where they appear

binding_pair         : 9 10
binding_pairs        : 1 10
empty                : 7
formula              : 0
negation_expression  : 12
opt_bound            : 4 5
quantifier           : 2 3
quantifiers          : 1 3
temporal_expression  : 1

Parsing method: LALR

state 0

    (0) S' -> . formula
    (1) formula -> . quantifiers COLON binding_pairs temporal_expression
    (2) quantifiers -> . quantifier
    (3) quantifiers -> . quantifiers quantifier
    (4) quantifier -> . EXIST opt_bound BINDING
    (5) quantifier -> . FORALL opt_bound BINDING

    EXIST           shift and go to state 4
    FORALL          shift and go to state 5

    formula                        shift and go to state 1
    quantifiers                    shift and go to state 2
    quantifier                     shift and go to state 3

state 1

    (0) S' -> formula .



state 2

    (1) formula -> quantifiers . COLON binding_pairs temporal_expression
    (3) quantifiers -> quantifiers . quantifier
    (4) quantifier -> . EXIST opt_bound BINDING
    (5) quantifier -> . FORALL opt_bound BINDING

    COLON           shift and go to state 6
    EXIST           shift and go to state 4
    FORALL          shift and go to state 5

    quantifier                     shift and go to state 7

state 3

    (2) quantifiers -> quantifier .

    COLON           reduce using rule 2 (quantifiers -> quantifier .)
    EXIST           reduce using rule 2 (quantifiers -> quantifier .)
    FORALL          reduce using rule 2 (quantifiers -> quantifier .)


state 4

    (4) quantifier -> EXIST . opt_bound BINDING
    (6) opt_bound -> . BOUND
    (7) opt_bound -> . empty
    (8) empty -> .

    BOUND           shift and go to state 9
    BINDING         reduce using rule 8 (empty -> .)

    opt_bound                      shift and go to state 8
    empty                          shift and go to state 10

state 5

    (5) quantifier -> FORALL . opt_bound BINDING
    (6) opt_bound -> . BOUND
    (7) opt_bound -> . empty
    (8) empty -> .

    BOUND           shift and go to state 9
    BINDING         reduce using rule 8 (empty -> .)

    opt_bound                      shift and go to state 11
    empty                          shift and go to state 10

state 6

    (1) formula -> quantifiers COLON . binding_pairs temporal_expression
    (9) binding_pairs -> . binding_pair
    (10) binding_pairs -> . binding_pairs binding_pair
    (11) binding_pair -> . LPAREN BINDING COMMA AGENT RPAREN

    LPAREN          shift and go to state 14

    binding_pairs                  shift and go to state 12
    binding_pair                   shift and go to state 13

state 7

    (3) quantifiers -> quantifiers quantifier .

    COLON           reduce using rule 3 (quantifiers -> quantifiers quantifier .)
    EXIST           reduce using rule 3 (quantifiers -> quantifiers quantifier .)
    FORALL          reduce using rule 3 (quantifiers -> quantifiers quantifier .)


state 8

    (4) quantifier -> EXIST opt_bound . BINDING

    BINDING         shift and go to state 15


state 9

    (6) opt_bound -> BOUND .

    BINDING         reduce using rule 6 (opt_bound -> BOUND .)


state 10

    (7) opt_bound -> empty .

    BINDING         reduce using rule 7 (opt_bound -> empty .)


state 11

    (5) quantifier -> FORALL opt_bound . BINDING

    BINDING         shift and go to state 16


state 12

    (1) formula -> quantifiers COLON binding_pairs . temporal_expression
    (10) binding_pairs -> binding_pairs . binding_pair
    (12) temporal_expression -> . negation_expression
    (13) temporal_expression -> . EVENTUALLY PROP
    (11) binding_pair -> . LPAREN BINDING COMMA AGENT RPAREN
    (14) negation_expression -> . NEG EVENTUALLY PROP

    EVENTUALLY      shift and go to state 20
    LPAREN          shift and go to state 14
    NEG             shift and go to state 21

    temporal_expression            shift and go to state 17
    binding_pair                   shift and go to state 18
    negation_expression            shift and go to state 19

state 13

    (9) binding_pairs -> binding_pair .

    EVENTUALLY      reduce using rule 9 (binding_pairs -> binding_pair .)
    LPAREN          reduce using rule 9 (binding_pairs -> binding_pair .)
    NEG             reduce using rule 9 (binding_pairs -> binding_pair .)


state 14

    (11) binding_pair -> LPAREN . BINDING COMMA AGENT RPAREN

    BINDING         shift and go to state 22


state 15

    (4) quantifier -> EXIST opt_bound BINDING .

    COLON           reduce using rule 4 (quantifier -> EXIST opt_bound BINDING .)
    EXIST           reduce using rule 4 (quantifier -> EXIST opt_bound BINDING .)
    FORALL          reduce using rule 4 (quantifier -> EXIST opt_bound BINDING .)


state 16

    (5) quantifier -> FORALL opt_bound BINDING .

    COLON           reduce using rule 5 (quantifier -> FORALL opt_bound BINDING .)
    EXIST           reduce using rule 5 (quantifier -> FORALL opt_bound BINDING .)
    FORALL          reduce using rule 5 (quantifier -> FORALL opt_bound BINDING .)


state 17

    (1) formula -> quantifiers COLON binding_pairs temporal_expression .

    $end            reduce using rule 1 (formula -> quantifiers COLON binding_pairs temporal_expression .)


state 18

    (10) binding_pairs -> binding_pairs binding_pair .

    EVENTUALLY      reduce using rule 10 (binding_pairs -> binding_pairs binding_pair .)
    LPAREN          reduce using rule 10 (binding_pairs -> binding_pairs binding_pair .)
    NEG             reduce using rule 10 (binding_pairs -> binding_pairs binding_pair .)


state 19

    (12) temporal_expression -> negation_expression .

    $end            reduce using rule 12 (temporal_expression -> negation_expression .)


state 20

    (13) temporal_expression -> EVENTUALLY . PROP

    PROP            shift and go to state 23


state 21

    (14) negation_expression -> NEG . EVENTUALLY PROP

    EVENTUALLY      shift and go to state 24


state 22

    (11) binding_pair -> LPAREN BINDING . COMMA AGENT RPAREN

    COMMA           shift and go to state 25


state 23

    (13) temporal_expression -> EVENTUALLY PROP .

    $end            reduce using rule 13 (temporal_expression -> EVENTUALLY PROP .)


state 24

    (14) negation_expression -> NEG EVENTUALLY . PROP

    PROP            shift and go to state 26


state 25

    (11) binding_pair -> LPAREN BINDING COMMA . AGENT RPAREN

    AGENT           shift and go to state 27


state 26

    (14) negation_expression -> NEG EVENTUALLY PROP .

    $end            reduce using rule 14 (negation_expression -> NEG EVENTUALLY PROP .)


state 27

    (11) binding_pair -> LPAREN BINDING COMMA AGENT . RPAREN

    RPAREN          shift and go to state 28


state 28

    (11) binding_pair -> LPAREN BINDING COMMA AGENT RPAREN .

    EVENTUALLY      reduce using rule 11 (binding_pair -> LPAREN BINDING COMMA AGENT RPAREN .)
    LPAREN          reduce using rule 11 (binding_pair -> LPAREN BINDING COMMA AGENT RPAREN .)
    NEG             reduce using rule 11 (binding_pair -> LPAREN BINDING COMMA AGENT RPAREN .)

